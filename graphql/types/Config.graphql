type CollectionCustomers {
  totalNodes: Int
  nodes: [Customer]
}

type Customer {
  id: String
  email: String
  userId: String
  firstName: String
  lastName: String
  isCorporate: Boolean
  createdIn: String
  lastInteractionIn: String
  updatedIn: String
  homePhone: String
  businessPhone: String
  isNewsletterOptIn: Boolean
  document: String
  documentType: String
  tradeName: String
  corporateName: String
  corporateDocument: String
  stateRegistration: String
}

type UnsubscribeResponse {
  status: String
}

input CollectionIntervalInput {
  init: Int
  end: Int
}

input CollectionSortInput {
  field: String!
  direction: CollectionSortDirection!
}

input CollectionFilterInput {
  field: String!
  relation: String!
  values: [String]!
}

enum CollectionSortDirection {
  DESC
  ASC
}

input UnsubscribeInput {
  id: String
}

input NewsletterProfileInput {
  email: String
  firstName: String
  lastName: String
  isNewsletterOptIn: Boolean
  createdIn: String
  updatedIn: String
}

type addNewsletterOmsProfilePayload {
  userErrors: [UserError]
}

type UserError {
  message: String!
  # The i18n translation code
  code: String!
  # Path to input field (or other target) which caused the error.
  # i.e.: ['accounts','0','name'] indicates an error at `accounts[0].name`
  path: [String!]
}
